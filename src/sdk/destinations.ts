/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../models/errors";
import * as operations from "../models/operations";

export class Destinations extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    /**
     * List Destinations
     */
    async getDestinations(options?: RequestOptions): Promise<operations.GetDestinationsResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const path = this.templateURLComponent("/destinations")();

        const security = this.options$.oAuth2ClientCredentials
            ? { oAuth2ClientCredentials: this.options$.oAuth2ClientCredentials }
            : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetDestinationsResponse$.inboundSchema.parse({
                ...responseFields,
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.GetDestinationsResponseBody$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.GetDestinationsResponseBody(result);
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = errors.GetDestinationsDestinationsResponseBody$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.GetDestinationsDestinationsResponseBody(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
