/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type GeteSIMRequest = {
    iccid: string;
};

export type Esim = {
    /**
     * ID of the eSIM
     */
    iccid?: string | undefined;
    /**
     * SM-DP+ Address
     */
    smdpAddress?: string | undefined;
    /**
     * The manual activation code
     */
    manualActivationCode?: string | undefined;
    /**
     * Status of the eSIM, possible values are 'RELEASED', 'DOWNLOADED', 'INSTALLED', 'ENABLED', 'DELETED', or 'ERROR'
     */
    status?: string | undefined;
};

/**
 * Successful Response
 */
export type GeteSIMResponseBody = {
    esim?: Esim | undefined;
};

export type GeteSIMResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful Response
     */
    object?: GeteSIMResponseBody | undefined;
};

/** @internal */
export namespace GeteSIMRequest$ {
    export type Inbound = {
        iccid: string;
    };

    export const inboundSchema: z.ZodType<GeteSIMRequest, z.ZodTypeDef, Inbound> = z
        .object({
            iccid: z.string(),
        })
        .transform((v) => {
            return {
                iccid: v.iccid,
            };
        });

    export type Outbound = {
        iccid: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GeteSIMRequest> = z
        .object({
            iccid: z.string(),
        })
        .transform((v) => {
            return {
                iccid: v.iccid,
            };
        });
}

/** @internal */
export namespace Esim$ {
    export type Inbound = {
        iccid?: string | undefined;
        smdpAddress?: string | undefined;
        manualActivationCode?: string | undefined;
        status?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Esim, z.ZodTypeDef, Inbound> = z
        .object({
            iccid: z.string().optional(),
            smdpAddress: z.string().optional(),
            manualActivationCode: z.string().optional(),
            status: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.iccid === undefined ? null : { iccid: v.iccid }),
                ...(v.smdpAddress === undefined ? null : { smdpAddress: v.smdpAddress }),
                ...(v.manualActivationCode === undefined
                    ? null
                    : { manualActivationCode: v.manualActivationCode }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        iccid?: string | undefined;
        smdpAddress?: string | undefined;
        manualActivationCode?: string | undefined;
        status?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Esim> = z
        .object({
            iccid: z.string().optional(),
            smdpAddress: z.string().optional(),
            manualActivationCode: z.string().optional(),
            status: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.iccid === undefined ? null : { iccid: v.iccid }),
                ...(v.smdpAddress === undefined ? null : { smdpAddress: v.smdpAddress }),
                ...(v.manualActivationCode === undefined
                    ? null
                    : { manualActivationCode: v.manualActivationCode }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}

/** @internal */
export namespace GeteSIMResponseBody$ {
    export type Inbound = {
        esim?: Esim$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GeteSIMResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            esim: z.lazy(() => Esim$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.esim === undefined ? null : { esim: v.esim }),
            };
        });

    export type Outbound = {
        esim?: Esim$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GeteSIMResponseBody> = z
        .object({
            esim: z.lazy(() => Esim$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.esim === undefined ? null : { esim: v.esim }),
            };
        });
}

/** @internal */
export namespace GeteSIMResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GeteSIMResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GeteSIMResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GeteSIMResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GeteSIMResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GeteSIMResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GeteSIMResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
